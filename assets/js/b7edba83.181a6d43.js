"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[685],{228:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Chirpstack-HPR/Chirpstack-HPR Setup","title":"Initial Setup","description":"This page documents the Docker setup and environment variable configuration required to run chirpstack-hpr in a Docker container. It provides details on the Docker environment required and optional environment variables, and configuration approaches for containerised deployment.","source":"@site/docs/Chirpstack-HPR/01-setup.md","sourceDirName":"Chirpstack-HPR","slug":"/chirpstack-hpr/initial-setup","permalink":"/chirpstack-hpr.github.io/docs/chirpstack-hpr/initial-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/ccall48/chirpstack-hpr.github.io/tree/master/docs/docs/Chirpstack-HPR/01-setup.md","tags":[{"inline":true,"label":"HPR setup","permalink":"/chirpstack-hpr.github.io/docs/tags/hpr-setup"},{"inline":true,"label":"docker compose","permalink":"/chirpstack-hpr.github.io/docs/tags/docker-compose"},{"inline":true,"label":"environment variables","permalink":"/chirpstack-hpr.github.io/docs/tags/environment-variables"}],"version":"current","sidebarPosition":1,"frontMatter":{"id":"Chirpstack-HPR Setup","title":"Initial Setup","sidebar_position":1,"sidebar_label":"Initial Setup","slug":"/chirpstack-hpr/initial-setup","tags":["HPR setup","docker compose","environment variables"]},"sidebar":"tutorialSidebar","previous":{"title":"ChirpStack Helium on Docker Compose","permalink":"/chirpstack-hpr.github.io/docs/chirpstack-helium"},"next":{"title":"Max Copies","permalink":"/chirpstack-hpr.github.io/docs/chirpstack-hpr/max-copies"}}');var s=n(4848),l=n(8453);const r={id:"Chirpstack-HPR Setup",title:"Initial Setup",sidebar_position:1,sidebar_label:"Initial Setup",slug:"/chirpstack-hpr/initial-setup",tags:["HPR setup","docker compose","environment variables"]},o=void 0,a={},c=[{value:"Git Clone Chirpstack-HPR",id:"git-clone-chirpstack-hpr",level:2},{value:"Environment Variable Configuration",id:"environment-variable-configuration",level:2},{value:"Find container names",id:"find-container-names",level:2},{value:"Compose Environment Variables",id:"compose-environment-variables",level:2},{value:"Docker Compose File using .env",id:"docker-compose-file-using-env",level:2},{value:"Docker Compose File without using .env",id:"docker-compose-file-without-using-env",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"This page documents the Docker setup and environment variable configuration required to run chirpstack-hpr in a Docker container. It provides details on the Docker environment required and optional environment variables, and configuration approaches for containerised deployment."})}),"\n",(0,s.jsxs)(t.admonition,{type:"warning",children:[(0,s.jsx)(t.p,{children:"Please ensure you have followed the initial setup procedures outlined in the official documentation for running a Helium IOT Network LNS."}),(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://docs.helium.com/iot/run-an-lns",children:"Run a LoRaWAN Network Server"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://docs.helium.com/iot/lorawan-roaming",children:"LoRaWAN Roaming on Helium"}),"."]}),"\n"]}),(0,s.jsx)(t.p,{children:"Before continuing further you should already have a fully operational Chirpstack LNS operating on docker compose."})]}),"\n",(0,s.jsx)(t.h2,{id:"git-clone-chirpstack-hpr",children:"Git Clone Chirpstack-HPR"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",metastring:'title="docker-compose.yml"',children:"git clone https://github.com/ccall48/chirpstack-hpr.git\ncd chirpstack-hpr\ncp .env.sample .env\n"})}),"\n",(0,s.jsx)(t.h2,{id:"environment-variable-configuration",children:"Environment Variable Configuration"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"ENV VAR"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Value"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"HELIUM_CONFIG_HOST"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"config.iot.mainnet.helium.io"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Default value"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"HELIUM_PORT"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"6080"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Default value"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"HELIUM_KEYPAIR_PATH"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"/path/to/your/delegate.bin"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Path on your machine to delegate.bin file"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"HELIUM_NET_ID"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"00003C"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Only change if using netid assigned by Lora Alliance"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"HELIUM_OUI"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"0000"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"OUI Assigned to you by Helium Foundation"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"HELIUM_MAX_COPIES"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"15"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Default copies purchased if not set per device"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"ROUTE_ID"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"UUID"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.a,{href:"https://docs.helium.com/iot/run-an-lns/configure-routing-rules/#generate-route-in-helium-config-service",children:"The generated route id by iot-config on setup"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"CHIRPSTACK_SERVER"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"chirpstack-docker-1:8080"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Docker Chirpstack Hostname and Port"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"CHIRPSTACK_APIKEY"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"JWT Token"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Global APIKEY generated via Webui or Terminal"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"REDIS_HOST"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"chirpstack-docker-redis-1"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Docker Chirpstack Redis Hostname"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"POSTGRES_USER"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"chirpstack"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Chirpstack Postgres Username - set on setup"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"POSTGRES_PASS"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"chirpstack"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Chirpstack Postgres Password - set on setup"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"POSTGRES_HOST"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"chirpstack-docker-postgres-1"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Docker Chirpstack Postgres Hostname"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"POSTGRES_PORT"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"5432"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Default Postgres port"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"POSTGRES_SSL_MODE"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:'"false"'}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:'Options: "require" or "false"'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"POSTGRES_DB"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"chirpstack"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Chirpstack Postgres database name"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"PUBLISH_USAGE_EVENTS"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"False"}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Default false"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"find-container-names",children:"Find container names"}),"\n",(0,s.jsxs)(t.p,{children:["To find the name of all docker containers on your machine you run the following in terminal\n",(0,s.jsx)(t.code,{children:'docker ps -a --format "{{.Names}}"'})," this should give you a list of container names you will\nneed to populate the hostname bellow in chirpstack-HPR environment."]}),"\n",(0,s.jsx)(t.h2,{id:"compose-environment-variables",children:"Compose Environment Variables"}),"\n",(0,s.jsxs)(t.p,{children:["You can create your own docker compose file, or set the required environment variables in the\n",(0,s.jsx)(t.code,{children:".env"})," file which will populate the provided compose file values when you bring the container up."]}),"\n",(0,s.jsxs)(t.p,{children:["There is a template ",(0,s.jsx)(t.code,{children:".env"})," file in the git repository you cloned. To use and add values to this\ntemplate if you did not follow the above steps ",(0,s.jsx)(t.code,{children:"cd"})," if you are not already into the ",(0,s.jsx)(t.code,{children:"chirpstack-hpr"}),"\ndirectory and ",(0,s.jsx)(t.code,{children:"cp .env.sample .env"}),". This will add a skeleton ",(0,s.jsx)(t.code,{children:".env"})," file for you to populate with\nvalues required using the editor of choice."]}),"\n",(0,s.jsx)(t.admonition,{title:"Generate Global APIKEY from terminal",type:"tip",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"docker exec chirpstack-docker-chirpstack-1 chirpstack --config /etc/chirpstack create-api-key --name globalKey"})})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-env",metastring:'title="Example .env file"',children:'# Environment variables expected to run ChirpStack HPR. Customise as required.\n# NB: the server and hosts are the docker hostnames!\n\n# Helium (Required)\nHELIUM_CONFIG_HOST=config.iot.mainnet.helium.io\nHELIUM_PORT=6080\nHELIUM_KEYPAIR_PATH=</path/to/your/delegate.bin>. # eg. /home/$USER/delegate.key\nHELIUM_NET_ID=00003C  # 00003C Default Helium\nHELIUM_OUI=<YOUR OUI>\nHELIUM_MAX_COPIES=15\nROUTE_ID=<HELIUM ROUTE ID>\n\n# ChirpStack (Required)\nCHIRPSTACK_SERVER=<CHIRPSTACK HOST:PORT>\nCHIRPSTACK_APIKEY=<CHIRPSTACK ADMIN APIKEY FROM WEBUI>\nREDIS_HOST=<REDIS HOST>\n\n# Database (Required)\nPOSTGRES_USER=<DB USERNAME>\nPOSTGRES_PASS=<DB PASSWORD>\nPOSTGRES_HOST=<DB HOSTNAME>\nPOSTGRES_PORT=5432\nPOSTGRES_SSL_MODE="false"  # "require" or "false"\nPOSTGRES_DB=<DB NAME>\n\n# Usage Event Publisher (Optional)\nPUBLISH_USAGE_EVENTS=False\nPUBLISH_USAGE_EVENTS_PROVIDER=<Provider, e.g. AWS_SQS>\n\n# Usage Event SQS Publisher (Optional)\nPUBLISH_USAGE_EVENTS_SQS_URL=<SQS URL>\nPUBLISH_USAGE_EVENTS_SQS_REGION=<AWS Region>\nAWS_ACCESS_KEY_ID=<AWS Access Key>\nAWS_SECRET_ACCESS_KEY=<AWS Secret Key>\n\n# Usage Event Postgres Publisher (Optional)\nPG_EVENTS_USER=<postgres username>\nPG_EVENTS_PASS=<postgres password>\nPG_EVENTS_PORT=<postgres port>\nPG_EVENTS_HOST=<postgres host>\nPG_EVENTS_DB=<postgres database>\n\n# Usage Event HTTP Publisher (Optional)\nHTTP_PUBLISHER_ENDPOINT=<https://example.com>\n'})}),"\n",(0,s.jsx)(t.h2,{id:"docker-compose-file-using-env",children:"Docker Compose File using .env"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yml",metastring:'title="Minimal docker-compose.yml, using .env file values"',children:"services:\n  chirpstack-hpr:\n    image: ghcr.io/ccall48/chirpstack-hpr:latest\n    container_name: chirpstack-hpr\n    restart: unless-stopped\n    volumes:\n      - './app:/app'\n      - '${HELIUM_KEYPAIR_PATH}:/app/delegate_key.bin:ro'\n    environment:\n      - HELIUM_CONFIG_HOST=${HELIUM_CONFIG_HOST}\n      - HELIUM_KEYPAIR_BIN=/app/delegate_key.bin\n      - HELIUM_NET_ID=${HELIUM_NET_ID}\n      - HELIUM_OUI=${HELIUM_OUI}\n      - HELIUM_MAX_COPIES=${HELIUM_MAX_COPIES}\n      - ROUTE_ID=${ROUTE_ID}\n      # ChirpStack (Required)\n      - CHIRPSTACK_SERVER=${CHIRPSTACK_SERVER}\n      - CHIRPSTACK_APIKEY=${CHIRPSTACK_APIKEY}\n      - REDIS_HOST=${REDIS_HOST}\n      # Database (Required)\n      - POSTGRES_USER=${POSTGRES_USER}\n      - POSTGRES_PASS=${POSTGRES_PASS}\n      - POSTGRES_HOST=${POSTGRES_HOST}\n      - POSTGRES_PORT=${POSTGRES_PORT}\n      - POSTGRES_SSL_MODE=${POSTGRES_SSL_MODE}\n      - POSTGRES_DB=${POSTGRES_DB}\n      # Usage Event Publisher (Optional)\n      - PUBLISH_USAGE_EVENTS=${PUBLISH_USAGE_EVENTS}\n      - PUBLISH_USAGE_EVENTS_PROVIDER=${PUBLISH_USAGE_EVENTS_PROVIDER}\n      # Usage Event SQS Publisher (Optional)\n      - PUBLISH_USAGE_EVENTS_SQS_URL=${PUBLISH_USAGE_EVENTS_SQS_URL}\n    command: bash -c 'cd /app && python app.py'\n\nnetworks:\n  default:\n    name: helium-iot-net\n    external: true\n"})}),"\n",(0,s.jsx)(t.h2,{id:"docker-compose-file-without-using-env",children:"Docker Compose File without using .env"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yml",metastring:'title="Minimal docker-compose.yml file without .env file"',children:"services:\n  chirpstack-hpr:\n    image: ghcr.io/ccall48/chirpstack-hpr:latest\n    container_name: chirpstack-hpr\n    restart: unless-stopped\n    volumes:\n      - './app:/app'\n      - '/path/to/helium/delegate_key.bin:/app/delegate_key.bin:ro'\n    environment:\n      - HELIUM_CONFIG_HOST=config.iot.mainnet.helium.io\n      - HELIUM_PORT=6080\n      - HELIUM_KEYPAIR_BIN=/app/delegate_key.bin\n      - HELIUM_NET_ID=00003C # Helium netid, change if not using helium.\n      - HELIUM_OUI=<OUI> # Helium oui issued to you by helium foundation\n      - HELIUM_MAX_COPIES=15 # default max copies you want to purchase per uplink\n      - ROUTE_ID=<ROUTE_ID> # Helium route-id\n      # ChirpStack (Required)\n      - CHIRPSTACK_SERVER=chirpstack-docker-chirpstack-1:8080 # Check docker container names and set\n      - CHIRPSTACK_APIKEY=\"Generate & paste Global APIKEY Here\"\n      - REDIS_HOST=chirpstack-docker-redis-1 # Check docker container names and set\n      # Database (Required)\n      - POSTGRES_USER=chirpstack # Value you set in chirpstack-docker compose file.\n      - POSTGRES_PASS=chirpstack # Value you set in chirpstack-docker compose file.\n      - POSTGRES_HOST=chirpstack-docker-postgres-1 # Check docker container names and set\n      - POSTGRES_PORT=5432 # default postgres port if not changed\n      - POSTGRES_SSL_MODE=\"false\" # default is \"false\"\n      - POSTGRES_DB=chirpstack # Value you set in chirpstack-docker compose file.\n      # Usage Event Publisher (Optional)\n      -  PUBLISH_USAGE_EVENTS=False # default is False\n    command: bash -c 'cd /app && python app.py'\n\nnetworks:\n  default:\n    name: helium-iot-net\n    external: true\n"})})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(6540);const s={},l=i.createContext(s);function r(e){const t=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(l.Provider,{value:t},e.children)}}}]);