"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[676],{7255:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"docker-compose","title":"ChirpStack Helium on Docker Compose","description":"ChirpStack Helium","source":"@site/docs/02-chirpstack-helium.md","sourceDirName":".","slug":"/chirpstack-helium","permalink":"/chirpstack-hpr.github.io/docs/chirpstack-helium","draft":false,"unlisted":false,"editUrl":"https://github.com/ccall48/chirpstack-hpr.github.io/tree/master/docs/docs/02-chirpstack-helium.md","tags":[{"inline":true,"label":"chirpstack-docker","permalink":"/chirpstack-hpr.github.io/docs/tags/chirpstack-docker"},{"inline":true,"label":"chirpstack.toml","permalink":"/chirpstack-hpr.github.io/docs/tags/chirpstack-toml"},{"inline":true,"label":"docker compose","permalink":"/chirpstack-hpr.github.io/docs/tags/docker-compose"},{"inline":true,"label":"docker-compose.yml","permalink":"/chirpstack-hpr.github.io/docs/tags/docker-compose-yml"},{"inline":true,"label":"helium-config-service-cli","permalink":"/chirpstack-hpr.github.io/docs/tags/helium-config-service-cli"}],"version":"current","sidebarPosition":2,"frontMatter":{"id":"docker-compose","title":"ChirpStack Helium on Docker Compose","sidebar_position":2,"pagination_label":"ChirpStack Helium on Docker Compose","sidebar_label":"Chirpstack Helium","description":"ChirpStack Helium","image":"https://docs.helium.com/img/link-image.png","slug":"/chirpstack-helium","tags":["chirpstack-docker","chirpstack.toml","docker compose","docker-compose.yml","helium-config-service-cli"]},"sidebar":"tutorialSidebar","previous":{"title":"Project Intro","permalink":"/chirpstack-hpr.github.io/docs/intro"},"next":{"title":"Initial Setup","permalink":"/chirpstack-hpr.github.io/docs/chirpstack-hpr/initial-setup"}}');var r=i(4848),s=i(8453);const c={id:"docker-compose",title:"ChirpStack Helium on Docker Compose",sidebar_position:2,pagination_label:"ChirpStack Helium on Docker Compose",sidebar_label:"Chirpstack Helium",description:"ChirpStack Helium",image:"https://docs.helium.com/img/link-image.png",slug:"/chirpstack-helium",tags:["chirpstack-docker","chirpstack.toml","docker compose","docker-compose.yml","helium-config-service-cli"]},o=void 0,a={},d=[{value:"Infrastructure Requirements",id:"infrastructure-requirements",level:2},{value:"Server Configuration",id:"server-configuration",level:2},{value:"ChirpStack Port Accessibility",id:"chirpstack-port-accessibility",level:2},{value:"ChirpStack Configuration",id:"chirpstack-configuration",level:2},{value:"Gather Helium DevAddr Subnet Information for OUI",id:"gather-helium-devaddr-subnet-information-for-oui",level:3},{value:"Update chirpstack.toml",id:"update-chirpstacktoml",level:3},{value:"Update docker-compose.yml",id:"update-docker-composeyml",level:3},{value:"Example of a complete <code>docker-compose.yml</code> file",id:"example-of-a-complete-docker-composeyml-file",level:3},{value:"Create External Docker Network",id:"create-external-docker-network",level:2},{value:"Run ChirpStack",id:"run-chirpstack",level:2},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.admonition,{title:"Requirement",type:"danger",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Helium Config Service Cli"}),"\n",(0,r.jsx)(n.code,{children:"helium-config-service-cli"})," is required for some of these steps."]}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Download latest suitable pre-compiled binary:\n",(0,r.jsx)(n.a,{href:"https://github.com/helium/helium-config-service-cli/releases",children:"Latest Release Here"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Compile from source yourself locally:\n",(0,r.jsx)(n.a,{href:"https://docs.helium.com/iot/run-an-lns/buy-an-oui#install-cli",children:"Steps to compile from source"}),"."]}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"infrastructure-requirements",children:"Infrastructure Requirements"}),"\n",(0,r.jsxs)(n.admonition,{title:"Suggested Minimum Requirements",type:"warning",children:[(0,r.jsx)(n.p,{children:"The infrastructure requirements noted below are sufficient for getting a ChirpStack instance up and\nrunning for experimentation purposes, but are not suggested for use in a mission critical,\nproduction setting."}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"4 vCPU"}),"\n",(0,r.jsx)(n.li,{children:"8GB RAM"}),"\n",(0,r.jsx)(n.li,{children:"100GB SSD hard drive"}),"\n",(0,r.jsx)(n.li,{children:"CPU with x86 architecture"}),"\n",(0,r.jsx)(n.li,{children:"Ubuntu 22.04 or 24.04"}),"\n"]})]}),"\n",(0,r.jsx)(n.h2,{id:"server-configuration",children:"Server Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["While there are several methods for installing ChirpStack, this guide will demonstrate a\nconfiguration using Docker and the\n",(0,r.jsx)(n.a,{href:"https://github.com/chirpstack/chirpstack-docker",children:"chirpstack-docker"})," repository."]}),"\n",(0,r.jsxs)(n.p,{children:["Accordingly, on the server intended to run the ChirpStack instance,\n",(0,r.jsx)(n.a,{href:"https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository",children:"install Docker"})," using\nthe ",(0,r.jsx)(n.code,{children:"apt"})," repository on Ubuntu."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",metastring:'title="Install Docker using the apt repository"',children:'# Add Docker\'s official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\n\n# Install the latest version:\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Verify that the Docker Engine installation is successful by running the hello-world image:\nsudo docker run hello-world\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Next, clone the ",(0,r.jsx)(n.code,{children:"chirpstack-docker"})," repository."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",metastring:'title="Clone the chirpstack-docker repository."',children:"git clone https://github.com/chirpstack/chirpstack-docker.git\n"})}),"\n",(0,r.jsx)(n.h2,{id:"chirpstack-port-accessibility",children:"ChirpStack Port Accessibility"}),"\n",(0,r.jsx)(n.p,{children:"For the configuration described in this guide, the following ports need to be accessible on the\nserver running the ChirpStack instance."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["TCP ",(0,r.jsx)(n.code,{children:"8080"})]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ChirpStack web UI and gRPC API are accessible over ",(0,r.jsx)(n.code,{children:"http://<public_ip_address>:8080"})]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["UDP ",(0,r.jsx)(n.code,{children:"1700"})]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["As described in further detail below, the ",(0,r.jsx)(n.code,{children:"chirpstack-gateway-bridge"})," container for the EU868\nregion binds to UDP ",(0,r.jsx)(n.code,{children:"1700"}),". As such, for EU868-based sensor traffic to reach ChirpStack, UDP\n",(0,r.jsx)(n.code,{children:"1700"})," needs to be open."]}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["UDP ",(0,r.jsx)(n.code,{children:"1701"})]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Similarly, the ",(0,r.jsx)(n.code,{children:"chirpstack-gateway-bridge"})," container for the US915 region binds to UDP ",(0,r.jsx)(n.code,{children:"1701"}),". As\nsuch, for US915-based sensor traffic to reach ChirpStack, UDP ",(0,r.jsx)(n.code,{children:"1701"})," needs to be open."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Please note that if more ",(0,r.jsx)(n.code,{children:"chirpstack-gateway-bridge"})," containers are added for additional LoRaWAN\nregions, the corresponding UDP ports will need to be added in a similar manner to UDP ",(0,r.jsx)(n.code,{children:"1700"})," and\n",(0,r.jsx)(n.code,{children:"1701"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"chirpstack-configuration",children:"ChirpStack Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["The ChirpStack settings need to be configured so that ChirpStack can operate on the Helium Network.\nIn particular, the ",(0,r.jsx)(n.code,{children:"chirpstack.toml"})," and ",(0,r.jsx)(n.code,{children:"docker-compose.yml"})," files, respectively located in the\n",(0,r.jsx)(n.code,{children:"./chirpstack-docker/configuration/chirpstack/"})," and ",(0,r.jsx)(n.code,{children:"./chirpstack-docker/"})," directories, need to be\nupdated. Prior to doing so, however, Helium-specific information for the OUI needs to be gathered to\nbe applied in the ChirpStack configuration."]}),"\n",(0,r.jsx)(n.h3,{id:"gather-helium-devaddr-subnet-information-for-oui",children:"Gather Helium DevAddr Subnet Information for OUI"}),"\n",(0,r.jsxs)(n.p,{children:["Use the Helium Config Service CLI to determine the subnet masks for the ",(0,r.jsx)(n.code,{children:"DevAddr"})," associated with\nthe LNS. In ChirpStack, the subnet masks will be referred to as ",(0,r.jsx)(n.code,{children:"dev_addr_prefixes"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["To do so, first retrieve the ",(0,r.jsx)(n.code,{children:"DevAddr"})," constraints for the OUI. The relevant values are each of the\n",(0,r.jsx)(n.code,{children:"start_addr"})," and ",(0,r.jsx)(n.code,{children:"end_addr"})," groups provided in the ",(0,r.jsx)(n.code,{children:"devaddr_constraints"})," array."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"helium-config-service-cli org get --oui <OUI>\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="Example result from helium-config-service-cli org get --oui command"',children:'{\n  "org": {\n    "oui": <OUI>,\n    "owner": <Owner Public Key>,\n    "payer": <Payer Public Key>,\n    "delegate_keys": [\n      <Deletgate Public Key>\n    ],\n    "locked": <Locked status>\n  },\n  "net_id": <Net ID>,\n  "devaddr_constraints": [\n    {\n      "start_addr": <Starting DevAddr>, // First DevAddr constraint\n      "end_addr": <Ending DevAddr> // Second DevAddr constraint\n    }\n  ]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Next, using the ",(0,r.jsx)(n.code,{children:"start_addr"})," and ",(0,r.jsx)(n.code,{children:"end_addr"})," values, identify the ",(0,r.jsx)(n.code,{children:"DevAddr"})," subnet masks, (e.g.,\nlabeled as ",(0,r.jsx)(n.code,{children:"subnets"})," in the returned JSON). If there are multiple, non-contiguous\n",(0,r.jsx)(n.code,{children:"devaddr_constraints"}),", this will need to be done for each set of constraints."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"helium-config-service-cli subnet-mask <Starting DevAddr> <Ending DevAddr>\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",metastring:'title="Example result from helium-config-service-cli subnet-mask command"',children:'{\n  "range": {\n    "start_addr": <Starting DevAddr>,\n    "end_addr": <Ending DevAddr>\n  },\n  "subnets": [\n    <Subnet Mask> // Desired value corresponding to the ChirpStack dev_addr_prefixes\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"update-chirpstacktoml",children:"Update chirpstack.toml"}),"\n",(0,r.jsxs)(n.p,{children:["Access ",(0,r.jsx)(n.code,{children:"./chirpstack-docker/configuration/chirpstack/chirpstack.toml"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Modify the following sections of ",(0,r.jsx)(n.code,{children:"chirpstack.toml"}),". All other sections can be left as is."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Under ",(0,r.jsx)(n.code,{children:"[network]"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Set ",(0,r.jsx)(n.code,{children:"net_id"})," to the Helium Net ID, ",(0,r.jsx)(n.code,{children:"00003C"}),", e.g., ",(0,r.jsx)(n.code,{children:'net_id="00003C"'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Add ",(0,r.jsx)(n.code,{children:"dev_addr_prefixes"})," with the value ",(0,r.jsx)(n.code,{children:"[<Subnet Mask>]"}),", e.g.,\n",(0,r.jsx)(n.code,{children:"dev_addr_prefixes=[<Subnet Mask>]"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["As an illustrative example, if the ",(0,r.jsx)(n.code,{children:"helium-config-service-cli subnet-mask"})," command indicated a\nsubnet mask of ",(0,r.jsx)(n.code,{children:"00000000/29"}),", then add ",(0,r.jsx)(n.code,{children:'dev_addr_prefixes=["00000000/29"]'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If the OUI has multiple non-sequential ",(0,r.jsx)(n.code,{children:"DevAddr"})," ranges, separate the corresponding subnet\nmasks by comma. For instance, ",(0,r.jsx)(n.code,{children:'dev_addr_prefixes=["00000000/29", "00000010/29"]'}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Update the ",(0,r.jsx)(n.code,{children:"enabled_regions"})," array to include the desired regions.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Multiple regions can be enabled simultaneously."}),"\n",(0,r.jsxs)(n.li,{children:["Each added region must match the ",(0,r.jsx)(n.code,{children:"id"})," parameter of the ",(0,r.jsx)(n.code,{children:"[[regions]]"})," configuration in the\ncorresponding ",(0,r.jsx)(n.code,{children:"./chirpstack-docker/configuration/chirpstack/<region>.toml"})," file. In other\nwords, if the ",(0,r.jsx)(n.code,{children:"id"})," parameter of the ",(0,r.jsx)(n.code,{children:"[[regions]]"})," configuration is ",(0,r.jsx)(n.code,{children:"us915_0"}),", add ",(0,r.jsx)(n.code,{children:"us915_0"})," to\nthe ",(0,r.jsx)(n.code,{children:"enabled_regions"})," array."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Under ",(0,r.jsx)(n.code,{children:"[api]"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Update the ",(0,r.jsx)(n.code,{children:"secret"})," value used for generating login and API tokens."]}),"\n",(0,r.jsx)(n.li,{children:"Make sure this value is never exposed."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Create a new, top level ",(0,r.jsx)(n.code,{children:"[gateway]"})," section:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Below, add ",(0,r.jsx)(n.code,{children:"allow_unknown_gateways=true"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["An example of the above-mentioned modified sections of ",(0,r.jsx)(n.code,{children:"chirpstack.toml"})," is provided below. Please\nnote that the these values are exemplary and need to be filled in with the correct information for\nyour ChirpStack configuration. Again, all other sections in ",(0,r.jsx)(n.code,{children:"chirpstack.toml"})," can be left as is."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'# Network related configuration.\n[network]\n\n  # Network identifier (NetID, 3 bytes) encoded as HEX (e.g. 010203).\n  # Helium net_id="00003C"\n  net_id="00003C"\n\n  # Helium 8 block dev address prefix 29\n  # If you have multiple blocks you can add them as an array\n  dev_addr_prefixes=[\n    "78000000/29"\n  ]\n\n  # Enabled regions.\n  #\n  # Multiple regions can be enabled simultaneously. Each region must match\n  # the \'id\' parameter of the region configuration in \'[[regions]]\'.\n  enabled_regions=[\n    "eu868",\n    "us915_1",\n  ]\n\n# API interface configuration.\n[api]\n\n  # Secret.\n  #\n  # This secret is used for generating login and API tokens, make sure this\n  # is never exposed. Changing this secret will invalidate all login and API\n  # tokens. The following command can be used to generate a random secret:\n  #   openssl rand -base64 32\n  secret="REPLACE-WITH-YOUR-SECRET-HERE"\n\n# Global gateway configuration.\n# Please note that backend configuration can be found in the per-region\n# configuration in ./chirpstack-docker/configuration/chirpstack/<region>.toml\n[gateway]\n  # Allow unknown gateways.\n  #\n  # If set to true, then uplinks received from gateways not configured in\n  # ChirpStack will be allowed.\n  allow_unknown_gateways=true\n'})}),"\n",(0,r.jsx)(n.h3,{id:"update-docker-composeyml",children:"Update docker-compose.yml"}),"\n",(0,r.jsxs)(n.p,{children:["Remove the entire service definition for ",(0,r.jsx)(n.code,{children:"chirpstack-gateway-bridge-basicstation"}),". If you do\nnot intended on using the REST API you can also go ahead and remove the ",(0,r.jsx)(n.code,{children:"chirpstack-rest-api"}),"\ndefinition as it will needed."]}),"\n",(0,r.jsxs)(n.admonition,{title:"Recommended Image Definitions",type:"success",children:[(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"image: chirpstack/chirpstack:4"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"image: chirpstack/chirpstack-gateway-bridge:4"})}),"\n"]}),(0,r.jsx)(n.p,{children:"This will pull the latest stable images."})]}),"\n",(0,r.jsxs)(n.p,{children:["To support every region beyond the default EU868 defined in the ",(0,r.jsx)(n.code,{children:"enabled_regions"})," noted\nabove in the ",(0,r.jsx)(n.code,{children:"settings.toml"})," file, add ",(0,r.jsx)(n.code,{children:"chirpstack-gateway-bridge"})," service definitions for each\nadditional LoRaWAN region. Although this tutorial demonstrates adding support for US915 and EU868\nthese steps can be adapted for other regions."]}),"\n",(0,r.jsxs)(n.p,{children:["To do so, amend the ",(0,r.jsx)(n.code,{children:"chirpstack-gateway-bridge"})," label to be ",(0,r.jsx)(n.code,{children:"chirpstack-gateway-bridge-eu868"})," then\ncreate a new service definition for ",(0,r.jsx)(n.code,{children:"chirpstack-gateway-bridge-us915"})," as provided below:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:"chirpstack-gateway-bridge-us915_1:\n  image: chirpstack/chirpstack-gateway-bridge:4\n  container_name: chirpstack-gateway-bridge-us915_1\n  restart: unless-stopped\n  ports:\n    - 1701:1700/udp # The chirpstack-gateway-bridge-us915 container will bind to host port 1701\n  volumes:\n    - ./configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge\n  environment:\n    - INTEGRATION__MQTT__EVENT_TOPIC_TEMPLATE=us915_1/gateway/{{ .GatewayID }}/event/{{ .EventType }}\n    - INTEGRATION__MQTT__STATE_TOPIC_TEMPLATE=us915_1/gateway/{{ .GatewayID }}/state/{{ .StateType }}\n    - INTEGRATION__MQTT__COMMAND_TOPIC_TEMPLATE=us915_1/gateway/{{ .GatewayID }}/command/#\n  depends_on:\n    - mosquitto\n"})}),"\n",(0,r.jsxs)(n.p,{children:["See the\n",(0,r.jsx)(n.a,{href:"https://www.chirpstack.io/docs/chirpstack-gateway-bridge/configuration.html",children:"ChirpStack Gateway Bridge documentation"}),"\nfor full description on the configuration possibilities for the ",(0,r.jsx)(n.code,{children:"chirpstack-gateway-bridge"})," service."]}),"\n",(0,r.jsxs)(n.h3,{id:"example-of-a-complete-docker-composeyml-file",children:["Example of a complete ",(0,r.jsx)(n.code,{children:"docker-compose.yml"})," file"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="Example Chirpstack-Docker docker-compose.yml file."',children:'services:\n  chirpstack:\n    image: chirpstack/chirpstack:4\n    container_name: chirpstack\n    command: -c /etc/chirpstack\n    restart: unless-stopped\n    volumes:\n      - ./configuration/chirpstack:/etc/chirpstack\n    depends_on:\n      - postgres\n      - mosquitto\n      - redis\n    environment:\n      - MQTT_BROKER_HOST=mosquitto\n      - REDIS_HOST=redis\n      - POSTGRESQL_HOST=postgres\n    ports:\n      - "8080:8080"\n\n  chirpstack-gateway-bridge-eu868:\n    image: chirpstack/chirpstack-gateway-bridge:4\n    container_name: chirpstack-gateway-bridge-eu868\n    restart: unless-stopped\n    ports:\n      - "1700:1700/udp"\n    volumes:\n      - ./configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge\n    environment:\n      - INTEGRATION__MQTT__EVENT_TOPIC_TEMPLATE=eu868/gateway/{{ .GatewayID }}/event/{{ .EventType }}\n      - INTEGRATION__MQTT__STATE_TOPIC_TEMPLATE=eu868/gateway/{{ .GatewayID }}/state/{{ .StateType }}\n      - INTEGRATION__MQTT__COMMAND_TOPIC_TEMPLATE=eu868/gateway/{{ .GatewayID }}/command/#\n    depends_on:\n      - mosquitto\n\n  chirpstack-gateway-bridge-us915_1:\n    image: chirpstack/chirpstack-gateway-bridge:4\n    container_name: chirpstack-gateway-bridge-us915_1\n    restart: unless-stopped\n    ports:\n      - "1701:1700/udp"\n    volumes:\n      - ./configuration/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge\n    environment:\n      - INTEGRATION__MQTT__EVENT_TOPIC_TEMPLATE=us915_1/gateway/{{ .GatewayID }}/event/{{ .EventType }}\n      - INTEGRATION__MQTT__STATE_TOPIC_TEMPLATE=us915_1/gateway/{{ .GatewayID }}/state/{{ .StateType }}\n      - INTEGRATION__MQTT__COMMAND_TOPIC_TEMPLATE=us915_1/gateway/{{ .GatewayID }}/command/#\n    depends_on:\n      - mosquitto\n\n  chirpstack-rest-api:\n    image: chirpstack/chirpstack-rest-api:4\n    container_name: chirpstack-rest-api\n    restart: unless-stopped\n    command: --server chirpstack:8080 --bind 0.0.0.0:8090 --insecure\n    ports:\n      - "8090:8090"\n    depends_on:\n      - chirpstack\n\n  postgres:\n    image: postgres:14-alpine\n    container_name: chirpstack-postgres\n    restart: unless-stopped\n    volumes:\n      - ./configuration/postgresql/initdb:/docker-entrypoint-initdb.d\n      - postgresqldata:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_USER=chirpstack\n      - POSTGRES_PASSWORD=chirpstack\n      - POSTGRES_DB=chirpstack\n\n  redis:\n    image: redis:7-alpine\n    container_name: chirpstack-redis\n    restart: unless-stopped\n    command: redis-server --save 300 1 --save 60 100 --appendonly no\n    volumes:\n      - redisdata:/data\n\n  mosquitto:\n    image: eclipse-mosquitto:2\n    container_name: chirpstack-mosquitto\n    restart: unless-stopped\n    ports:\n      - "1883:1883"\n    volumes:\n      - ./configuration/mosquitto/config/:/mosquitto/config/\n\nvolumes:\n  postgresqldata:\n  redisdata:\n\nnetworks:\n  default:\n    name: helium-iot-net\n    external: true\n'})}),"\n",(0,r.jsx)(n.h2,{id:"create-external-docker-network",children:"Create External Docker Network"}),"\n",(0,r.jsxs)(n.p,{children:["For this example we will create an external docker network called ",(0,r.jsx)(n.code,{children:"helium-iot-net"})," which we will\nattach all the containers running chirpstack. If you're familiar with docker networking and already\nhave an existing docker network you intend on using adjust accordingly."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",metastring:'title="Create external docker network"',children:"docker network create helium-iot-net\n"})}),"\n",(0,r.jsx)(n.h2,{id:"run-chirpstack",children:"Run ChirpStack"}),"\n",(0,r.jsxs)(n.p,{children:["From the root of the ",(0,r.jsx)(n.code,{children:"chirpstack-docker"})," directory, run ",(0,r.jsx)(n.code,{children:"docker compose up --detach"})," to start the\ncontainers defining the ChirpStack instance in the background. Container logs can be accessed by\nrunning ",(0,r.jsx)(n.code,{children:"docker compose logs --follow"})," and the ChirpStack instance can be taken down by running\n",(0,r.jsx)(n.code,{children:"docker compose down"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ChirpStack web console should now be accessible at ",(0,r.jsx)(n.code,{children:"http://<public_ip_address>:8080"}),". The\ndefault initial login credentials are:"]}),"\n",(0,r.jsx)(n.admonition,{title:"Default ChirpStack First Logon",type:"info",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Username:"})," admin",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.strong,{children:"Password:"})," admin"]})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.p,{children:["Now that the LNS is operational, if you have not already done so proceed to establish the routing\nrules. This ensures that the Helium IOT Network accurately directs device packets to the designated\nLNS. Learn how to implement this in the ",(0,r.jsx)(n.a,{href:"https://docs.helium.com/iot/run-an-lns/configure-routing-rules/#generate-route-in-helium-config-service",children:"Configure Routing Rules"})," guide."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);